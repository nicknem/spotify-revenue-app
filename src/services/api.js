/**
 * API Service
 * 
 * Ce fichier contient toutes les fonctions pour communiquer avec notre backend Express.js.
 * Le backend utilise Puppeteer pour scraper les donn√©es Spotify et calculer les revenus.
 * 
 * Configuration:
 * - Backend sur le port 3001 (voir backend/server.js)
 * - Frontend sur le port 5173 (dev) ou autre en production
 * - CORS activ√© c√¥t√© backend pour permettre les requ√™tes cross-origin
 */

// Configuration de l'URL de base de notre API backend
const API_BASE_URL = 'http://localhost:3001';

/**
 * Fonction utilitaire pour faire des requ√™tes HTTP avec gestion d'erreur
 * 
 * @param {string} url - L'URL compl√®te de l'endpoint
 * @param {object} options - Options fetch() (method, headers, body, etc.)
 * @returns {Promise} - Promise qui r√©sout avec les donn√©es JSON ou rejette avec une erreur
 */
async function apiRequest(url, options = {}) {
  try {
    console.log(`üåê Requ√™te API: ${options.method || 'GET'} ${url}`);
    
    // Faire la requ√™te HTTP avec fetch()
    const response = await fetch(url, {
      // Headers par d√©faut
      headers: {
        'Content-Type': 'application/json',
        ...options.headers, // Permettre de surcharger les headers si n√©cessaire
      },
      ...options, // √âtaler toutes les autres options (method, body, etc.)
    });

    // V√©rifier si la requ√™te a r√©ussi (status 200-299)
    if (!response.ok) {
      // Si la r√©ponse contient du JSON avec un message d'erreur, l'utiliser
      let errorMessage = `Erreur HTTP ${response.status}`;
      try {
        const errorData = await response.json();
        errorMessage = errorData.error || errorMessage;
      } catch {
        // Si on ne peut pas parser le JSON, garder le message g√©n√©rique
      }
      
      throw new Error(errorMessage);
    }

    // Parser la r√©ponse JSON
    const data = await response.json();
    console.log('‚úÖ R√©ponse API re√ßue:', data);
    
    return data;
    
  } catch (error) {
    console.error('‚ùå Erreur API:', error);
    
    // Am√©liorer les messages d'erreur pour l'utilisateur
    if (error.name === 'TypeError' && error.message.includes('fetch')) {
      throw new Error('Impossible de contacter le serveur. V√©rifiez que le backend est d√©marr√© sur le port 3001.');
    }
    
    // Relancer l'erreur pour que le composant puisse la g√©rer
    throw error;
  }
}

/**
 * Analyser les revenus d'un artiste √† partir de son URL Spotify
 * 
 * Cette fonction envoie l'URL de l'artiste √† notre backend qui va :
 * 1. Extraire l'ID artiste de l'URL
 * 2. Scraper la page Spotify avec Puppeteer
 * 3. R√©cup√©rer les auditeurs mensuels
 * 4. Analyser le top 5 des titres
 * 5. Calculer les revenus estim√©s avec notre algorithme
 * 
 * @param {string} artistUrl - URL compl√®te de l'artiste Spotify
 * @returns {Promise<object>} - Objet contenant les r√©sultats d'analyse
 */
export async function analyzeArtistRevenue(artistUrl) {
  console.log(`üéµ Analyse des revenus pour: ${artistUrl}`);
  
  return await apiRequest(`${API_BASE_URL}/api/artist-revenue`, {
    method: 'POST',
    body: JSON.stringify({
      artistUrl: artistUrl, // Envoyer l'URL dans le body de la requ√™te
    }),
  });
}

/**
 * Fonction pour rechercher un artiste par nom (placeholder pour future impl√©mentation)
 * 
 * Cette fonction sera impl√©ment√©e plus tard quand on ajoutera l'int√©gration
 * avec l'API Spotify officielle pour la recherche d'artistes.
 * 
 * @param {string} query - Nom de l'artiste √† rechercher
 * @returns {Promise<object>} - R√©sultats de recherche
 */
export async function searchArtist(query) {
  console.log(`üîç Recherche d'artiste: ${query}`);
  
  return await apiRequest(`${API_BASE_URL}/api/search-artist?q=${encodeURIComponent(query)}`);
}

/**
 * V√©rifier le statut de sant√© de l'API backend
 * 
 * Utile pour s'assurer que le backend est op√©rationnel avant de faire
 * des requ√™tes plus complexes.
 * 
 * @returns {Promise<object>} - Statut du serveur
 */
export async function checkHealth() {
  return await apiRequest(`${API_BASE_URL}/health`);
}

/**
 * R√©cup√©rer les informations sur l'API (endpoints disponibles, version, etc.)
 * 
 * @returns {Promise<object>} - Informations sur l'API
 */
export async function getApiInfo() {
  return await apiRequest(`${API_BASE_URL}/`);
}

/**
 * Configuration et constantes export√©es pour utilisation dans les composants
 */
export const API_CONFIG = {
  BASE_URL: API_BASE_URL,
  DEFAULT_TIMEOUT: 30000, // 30 secondes (le scraping peut prendre du temps)
  RETRY_ATTEMPTS: 3,
};

/**
 * Messages d'erreur standardis√©s pour l'interface utilisateur
 */
export const ERROR_MESSAGES = {
  NETWORK_ERROR: 'Erreur de connexion. V√©rifiez votre connexion internet et que le backend est d√©marr√©.',
  INVALID_URL: 'URL Spotify invalide. V√©rifiez le format de l\'URL.',
  SCRAPING_FAILED: 'Impossible d\'analyser cette page Spotify. L\'artiste existe-t-il ?',
  SERVER_ERROR: 'Erreur serveur. Veuillez r√©essayer plus tard.',
  TIMEOUT: 'L\'analyse prend trop de temps. Veuillez r√©essayer.',
};